

帮助命令
man->mannual
  帮助信息和配置信息

  ============================    
  	2020/4/8
  ============================

Linux:后端开发
	Windows：个人应用
	MAC:办公

windows:
计算机
	|
	+---C
		|
		+---Windows
		+---System32

		D:
		|
		+---自己分配的内容

// 无文件夹，叫目录
Linux:
/ : 根文件，根目录

/root: root的家目录

/home/用户名：普通用户家目录

/etc:配置文件

/bin:普通命令

/sbin：管理命令

// 用户自己装的软件的命令，要有管理的权限
/usr/bin
/usr/sbin


管理硬件操作的软件：操作系统（C语言+汇编语言-->Linux kernel）
// 操作系统不可直接使用硬件（内存条）
硬件

命令：一个个的程序
shell命令


在Linux中一切皆文件，Java中一切皆对象
操作文件：open read write close


VFS：虚拟文件系统
网卡驱动程序员
提供统一标识

pwd：print working directory


man man:
j 向下走
k 向上走
q 退出

共八章
Linux Kernel
函数接口
200多个

第一章：用户命令
第二章：系统调用
第三章：C库
第四章：
第五章：配置文件
第六章：
第七章：
第八章：系统


Windows开发：装MSDN


Linux两种命令：

内置命令
外部命令 

shell程序+shell终端


/
n 向后找
N 像前找

ls -l -r:反向排序

对时间排序

ls -l -d :显示目录本身的信息
KISS原则：组合功能

. // 当前目录
.. // 父目录

目录相关的操作:

创建：mkdir
mkdir 目录名
创建子目录:-p


删除：
rm 
rm -r:递归删除
rm -r -f : 强制删除，不给提示
<==> rm -rf

移动（改名）：
mv 

拷贝 cp （可以拷贝时间 cp -p ）


通配符：
* 任意多个字符
? 一个任意字符


C语言实现
hehec-f-h0-3
==>
hehecdefgh0123


// 查看文件内容
cat 
tac
more：分屏显示 空格:下一屏 b:上一屏 q:直接退出
head:只显示前n行
tail：只显示末尾n行
wc：-l 统计有多少行

C语言实现有多少行多少个单词
int cnt = 0;
while(1){
	fread(buf,1,fp);
	break;
	if( buf[i] == '\n'){
		cnt++;
	}
}


管道符,管道线(前面执行结果作为后面执行对象) 
|
head /etc/passwd | wc -l ：统计head几行


echo abc > t.sh
> 输出重定向
>> 追加输出重定向

tail -f hehe : 跟踪显示文件信息

==========================================
	2020/4/9
==========================================
MMU：内存管理单元（与预处理器配合在物理地址取数据）
1、虚拟内存与物理内存的映射
在物理内存中按页进行存储
2、修改内存访问级别:0级 3级 

PCB：进程控制块，位于内核(Kernel),以结构体的形式存在:
{
	进程id:系统中每个进程有唯一的id,在C语言中用pid_t类型表示，其实就是非负整数；
	进程状态:准备、就绪、运行、挂起、停止；
	进程切换时需要保持和恢复的一些CPU寄存器的值；
	描述虚拟地址空间的信息；
	描述控制终端的信息；
	当前工作目录(Current Working Directory);
	umask掩码；
	文件描述符表，包含很多指向file结构体的指针；
	和信号相关的信息；
	用户id和组id;
	会话(Session)和进程组；
	进程可以使用资源上限(Resourse Limit);
}

ulimit -a：查看配置情况
显示所有限制资料


多任务多用户开源操作系统
shell解析器

环境变量：(接近于3G位置，和命令行参数在同一块CPU)
是指在操作系统中用来指定操作系统运行环境得一些参数

PATH
/bin/date
PATH环境变量新版本往前放

echo $PATH
echo $HOME
echo $SHELL
echo $LANG
echo $TERM

// 取环境变量 or 设置环境变量
getenv
setenv


进程：fork
创建进程
函数fork：create a child process(创建子进程)
返回值有两个
 1、返回子进程的id，非负整数 >0 （父进程的返回）
 2、返回0,调用成功才能返回0 (子进程的返回)
 （指针传出参数，向外带）

可执行文件


回顾 ：
pwd
ls [option] argument
	-l
	-a
	-r:反向查看
	-R
	-d:只显示目录
	-t:按时间排序

mkdir -p : 创建子目录，嵌套使用，强制创建父级目录
rmkdir
rm -r
touch cp mv

cat , more , head -n , tail -n , tail -n -f 
wc -l : 统计文件大小


vim 三种模式
1、命令模式 i a 
2、编辑模式 q w
3、末行模式







l:向右移动
I:插入行首
O:在当前行的上面行
o:下面
a:后面，i:前面
A:行尾
k:向上跑

h:向前移动
l:向后移动
j:向下移动
k:向上移动


nyy:复制n行
p粘贴
ndd删除n行
u:撤销
Ctrl+r:再撤回去
(两个栈实现删除撤销返回，实例有网页的访问)

yw：只复制一个单词
y$：当前位置到行尾
y^：当前位置到行尾

x:删除当前字符
r:替换当前字符
R:替换直至退出

D:删除当前行
dG:删除当前到最后

>test.c 清空文档内容

set nu:显示行号
set nonu:消除显示行号

vim /etc/vimrc:配置文件

$:跳到最后

/f ： 查找匹配字符

替换文本
%s/int/uint32_t :每一行第一个字符串被替换
多个都替换+/g

只替换n-m行:
n,ms/INT/int/g


可视化:
Ctrl+v 块可视化：注释，I，//，Esc
v
shift+v

~/.viminfo 存储vim命令

:r text.c ,把text.c放在光标所在位置
：3，5/;/\r{\r\r}\r/


创建用户：
useradd 用户名
id 用户名:查看用户信息
/home/用户名：家目录
ls -a 配置信息
//系统会在 /etc/passwd 增加用户信息
vim /etc/shadow

userdel wukong:之后，此时只有root可以访问
userdel -r wukong:同时删除home目录
usermod：修改用户的信息
 -d 修改家目录
 usermod -d /home/w1 w:将w的家目录改为w1，而不是w(其中w1为自建的目录mkdir w1)

 useradd user1
 自然创建user1这个组
 id user1
 将user1放在另一个组
 groupadd group1
 vim /etc/group 
给一个组增加成员，加入组
usermod -g zhenghong wukong

useradd -g zhenghong bajie:创建用户同时加入组



临时用户切换操作：
su - bajie (switch user)
：有 - 要密码
root -> bajie <- exit
不可su root 递归调用

sudo：以自己的身份去运行其他用户身份才能运行的命令

root:shutdown -h 20:20min之后关机
zhenghong:不想关机
	sudo shutdown -c
	(改变sudo文件授权)


















